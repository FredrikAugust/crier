* DONE add connection to pool of connections on connecting with the server
* TODO handle ping-ing the client to check if it's alive
  Spawn alongside handler in crier_server.
  If the client does not respond in time, send a call over to
  the remove_client function in crier_user_store.
** TODO figure out a way to kill connections when they don't respond
** DONE handle incoming pings from client
* DONE parsing input to IRC standards
** DONE create a module for interpreting input
* DONE migrate error logs to lager
* DONE store user record
* DONE check if nick/username is taken before assigning
  Shouldn't be too hard, just make sure response is `[]` from
  a selection query before setting the nick.
* DONE send appropriate error codes
  Refer to table at the bottom of this doc
* TODO find a way to get the address of the server and hostname of the user
  Perhaps an environment variable?
* DONE send post-reg messages to client if username and nick are set
* TODO write tests
  Use CommonTest, seems to work best (and easiest)
* DONE move non-store related business out of crier_user_store
* DONE write module doc for all modules
  Short description of what module does
** DONE add short description of each complicated function
* DONE handle joining a channel
#+BEGIN_SRC txt
SYNTAX:
:<nick>!~<username>@<host> JOIN #<channel>

host=name of server for us
#+END_SRC
** TODO show NAMES list when joining
* DONE handle PRIVMSG
* TODO handle leaving a channel
* TODO handle nick-change
* TODO handle kicking (banning will be skipped for simplicities sake)
* TODO handle user modes (operator, mod..)
* TODO use regex for handling IRC messages parsing
  Current system is plain stupid, but it works for now ;)
* TODO address 2sec lag when messages queue up
* Notes

IRC response codes
https://www.alien.net.au/irc/irc2numerics.html
